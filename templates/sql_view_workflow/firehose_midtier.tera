// TODO: Remove when copying
namespace OrderViewNamespace;

///
/// Database Accessor Object
/// 
public class {{view_name | snake_to_pascal}} 
{
    {% for column in columns %}
    public {{column.data_type | data_type_to_csharp_type}}? {{column.name | snake_to_pascal}} { get; set; }
    {% endfor %}    
}

///
/// Database Getter
///
public async Task<IEnumerable<{{view_name | snake_to_pascal}}>> Get{{view_name | snake_to_pascal}}({%if paged%}long pageSize = long.MaxValue, long pageOffset = 0{%else%}{%endif%})
    {
        var results = new List<{{view_name | snake_to_pascal}}>();

        try
        {
            var query = @"select {% for column in columns %}{{column.name}}{% if loop.last %}{% else %}, {% endif %}{% endfor %} from {{view_name}} {%if paged%}limit @page_size, offset @page_size * @page_offset{%else%}{%endif%};";
            using var conn = await _dbConnectionFactory.CreateConnection();
            using var cmd = new NpgsqlCommand(query, conn);
            {%if paged%}
            cmd.Parameters.AddWithValue("@page_size", pageSize);
            cmd.Parameters.AddWithValue("@page_offset", pageOffset);
            {%else%}{%endif%}
            await cmd.PrepareAsync();

            using var reader = await cmd.ExecuteReaderAsync();
            if (reader.HasRows)
            {
                while (await reader.ReadAsync())
                {
                    var result = new {{view_name | snake_to_pascal}}
                    {
                        {% for column in columns %}
                        {{column.name | snake_to_pascal}} = reader.GetFieldValue<{{column.data_type | data_type_to_csharp_type}}?>("{{column.name}}", null){% if loop.last %}{% else %},{% endif %}
                        {% endfor %}
                    };
                    results.Add(result);
                }
            }

            return results;
        }
        catch (Exception ex)
        {
            _logger.LogErrorException(ex, "Error executing select on {{view_name}}");
        }

        return null;
    }

    ///
    /// API Getter
    ///
    [HttpGet]
    [ProducesResponseType(200, Type = typeof(IEnumerable<{{view_name | snake_to_pascal}}>))]
    [ProducesResponseType(404)]
    [Route("<<INSERT ROUTE HERE>>")]
    public async Task<IActionResult> Get{{view_name | snake_to_pascal}}({%if paged%}long pageSize = long.MaxValue, long pageOffset = 0{%else%}{%endif%})
    {
        var authorizationResult = await _authorizationService.AuthorizeAsync(User, null, Operations.Read);
        if (!authorizationResult.Succeeded)
        {
            return new ForbidResult();
        }
    
        await Get{{view_name | snake_to_pascal}}({%if paged%}pageSize, pageOffset{%else%}{%endif%});
        return Ok();
    }
    
    ///
    /// Http Getter
    ///
    public async Task<List<{{view_name | snake_to_pascal}}>> Get{{view_name | snake_to_pascal}}({%if paged%}long? pageLimit, long? pageOffset{%else%}{%endif%})
    {
        var request = new RestRequest("<<INSERT ROUTE HERE>>", Method.Get)
            {%if paged%}
            .AddParameter("pageLimit", pageLimit, ParameterType.QueryString)
            .AddParameter("pageOffset", pageOffset, ParameterType.QueryString);
            {%else%};
            {%endif%}
        var response = await _restClient.ExecuteAsync<List<{{view_name | snake_to_pascal}}>>(request, _cts.Token);
        var result = JsonConvert.DeserializeObject<List<{{view_name | snake_to_pascal}}>>(response.Content);
        return result;
    }